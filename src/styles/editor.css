.ProseMirror {
  @apply p-12 px-8 sm:px-12;
}

.prose {
  /* Placeholder */
  > p.is-editor-empty::before {
    @apply text-muted-foreground pointer-events-none float-left h-0 content-[attr(data-placeholder)];
  }

  /* Task List */
  ul[data-type="taskList"] > li {
    @apply flex list-none items-start;
  }

  ul[data-type="taskList"] li > label {
    @apply mr-1 select-none;
  }

  ul[data-type="taskList"] li > label input[type="checkbox"] {
    -webkit-appearance: none;
    appearance: none;
    @apply bg-input relative top-[5px] m-0 mr-[0.3rem] grid size-[1.2rem] cursor-pointer place-content-center rounded-sm transition-colors;

    &:checked {
      @apply bg-primary text-primary-foreground;
    }

    &::before {
      content: "";
      width: 0.65em;
      height: 0.65em;
      transform: scale(0);
      transition: 120ms transform ease-in-out;
      transform-origin: center;
      box-shadow: inset 1em 1em;
      clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
    }

    &:checked::before {
      transform: scale(1);
    }
  }

  ul[data-type="taskList"] li[data-checked="true"] > div > p {
    @apply text-muted-foreground line-through decoration-2;
  }

  /* Blockquote */
  blockquote:not(.not-prose blockquote) {
    > p {
      @apply leading-1;
    }
    @apply border-l-4 bg-transparent py-2;
  }

  /* Inline code */
  code:not(pre code):not(.not-prose code) {
    font-size: inherit;
    @apply -z-1;

    &::after,
    &::before {
      content: "`";
    }
  }

  h2:not(.not-prose h2) {
    @apply border-0;
  }

  /* Code block */
  pre:not(.not-prose pre) {
    @apply bg-input/30 w-full overflow-x-auto rounded-md border font-mono text-sm whitespace-pre;
  }
}

/* Syntax highlighting  */
:root {
  @import "highlight.js/styles/github.css";
}

.dark {
  @import "highlight.js/styles/github-dark.css";
}
